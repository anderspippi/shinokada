#!/usr/bin/env bash

set -eu

# shellcheck disable=SC2034
VERSION="0.0.3"
SCRIPT_NAME=$(basename "$0")

# check os
if [[ $(uname) == "Linux" ]]; then
    FIREFOX="/usr/bin/firefox"
    # check if Firefox is running. If it is, ask if the script can close it.
    if pgrep -f firefox; then
        printf "Can I close Firefox? (yes/y/no/n)"
        read -r RES
        USER_ANS=$(echo "$RES" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [ "$USER_ANS" = "Y" ]; then
            killall firefox
        else
            echo "Exiting ..."
            exit
        fi
    fi
elif [[ $(uname) == "Darwin" ]]; then
    FIREFOX="/Applications/Firefox.app/Contents/MacOS/firefox"
fi

readlinkf() {
    [ "${1:-}" ] || return 1
    max_symlinks=40
    CDPATH='' # to avoid changing to an unexpected directory

    target=$1
    [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
    [ -d "${target:-/}" ] && target="$target/"

    cd -P . 2>/dev/null || return 1
    while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
        if [ ! "$target" = "${target%/*}" ]; then
            case $target in
            /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
            *) cd -P "./${target%/*}" 2>/dev/null || break ;;
            esac
            target=${target##*/}
        fi

        if [ ! -L "$target" ]; then
            target="${PWD%/}${target:+/}${target}"
            printf '%s\n' "${target:-/}"
            return 0
        fi
        link=$(ls -dl -- "$target" 2>/dev/null) || break
        target=${link#*" $target -> "}
    done
    return 1
}

self=$(readlinkf "$0")
script_dir=${self%/*}
# echo "$script_dir"

# remove files in outputs dir
if [ -n "$(ls "${script_dir}"/outputs)" ]; then
    echo "Removing files in $script_dir/outputs."
    rm -- "$script_dir"/outputs/*.*
fi

# shellcheck disable=SC1091
. "${script_dir}/lib/getoptions.sh"

# shellcheck disable=SC1083
parser_definition() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} [command] [options...] [arguments...]"
    msg -- '' 'Options:'
    disp :usage -h --help
    disp VERSION --version

    msg -- '' 'Commands: '
    msg -- 'Use command -h for a command help.'
    cmd clip -- "Clip image."
    cmd retro -- "Retro image."
    cmd split -- "Split text."
    cmd sticker -- "Sticker text."
    cmd 3d -- "3D letters."
    cmd arcade -- "Arcade typography"

    msg -- '' "Examples:
Clip an image: 
    $SCRIPT_NAME clip 
Retro banner: 
    $SCRIPT_NAME retro
Split text: 
    $SCRIPT_NAME split
Sticker text: 
    $SCRIPT_NAME sticker
3D letters
    $SCRIPT_NAME 3d
Arcade typography
    $SCRIPT_NAME arcade
Display the version:
    $SCRIPT_NAME --version
Display help:
    $SCRIPT_NAME -h | --help
"
}

eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"

# clip
font_type() {
    case $OPTARG in
    500) FONT_ATT=":wght@500" ;;
    700) FONT_ATT=":wght@700" ;;
    900) FONT_ATT=":wght@900" ;;
    esac
}

FONT_ATT=''
FONT_WEIGHT='500 | 700 | 900'

parser_definition_clip() {
    setup REST plus:true help:usage abbr:true -- \
        "Usage: ${2##*/} clip [options...] [arguments...]" ''
    msg -- 'Clip an image to texts.' ''
    msg label:"OPTIONS" -- "DESCRIPTION"
    param TEXT -t --text init:="It's Friday." -- "-t 'Your Text to print'"
    param FONT_NAME -f --font init:="Luckiest Guy" -- "-f 'Font Name'"
    param SIZE -s --size init:=180 -- "-s 120 will set CSS font-size: 120px"
    param BKIMG -i --image init:="${script_dir}/assets/flower.jpg" -- "-i background-image.jpg"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs" -- "-d /Path/to/dir without the trailing slash."
    param WIDTH -w --width init:="1600" -- "-w 1240. The default width is 1600px."
    param HEIGHT -e --height init:="1200" -- "-h 800. The default height is 1200px."
    param WEIGHT -b --bold validate:font_type pattern:"$FONT_WEIGHT" -- "-b 900. This sets the font weight. Choose from 500|700|900."
    disp :usage -h --help
    disp VERSION --version
}

# retro
parser_definition_retro() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} retro [options] [arguments]"
    msg -- 'Options:'
    param HEADER -H --header init:="RETRO" -- "accepts --header word / --header=word"
    param SUB_HEADER -S --subheader init:="Text Effect" -- "accepts --subheader word / --subheader=word"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs" -- "-d /Path/to/dir without the trailing slash."
    disp :usage -h --help
}

# split
parser_definition_split() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} split [options] [arguments]"
    msg -- 'Options:'
    param HEADER -H --header init:="SPLIT" -- "accepts --header word / --header=word"
    param COLOR -c --color init:="#fff" -- "Color"
    param BCOLOR -b --bcolor init:="#000" -- "Background Color"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs" -- "-d /Path/to/dir without the trailing slash."
    disp :usage -h --help
}

# sticker
parser_definition_sticker() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} sticker [options] [arguments]"
    msg -- 'Options:'
    param HEADER -H --header init:="STICKER" -- "accepts --header word / --header=word"
    param SUB_HEADER -S --subheader init:="Text Effect" -- "accepts --subheader word / --subheader=word"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs" -- "-d /Path/to/dir without the trailing slash."
    disp :usage -h --help
}

# 3d
parser_definition_3d() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} 3d [options] [arguments]"
    msg -- 'Options:'
    param HEADER -H --header init:="Three D" -- "accepts --header word / --header=word"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs/" -- "-d /Path/to/dir without the trailing slash."
    disp :usage -h --help
}

parser_definition_arcade() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} arcade [options] [arguments]"
    msg -- 'Options:'
    param HEADER -H --header init:="arcade" -- "accepts --header word / --header=word"
    param OUTPUT_DIR -d --dir init:="${script_dir}/outputs" -- "-d /Path/to/dir without the trailing slash."
    param WIDTH -w --width init:="1600" -- "-w 1240. The default width is 1600px."
    param HEIGHT -e --height init:="1200" -- "-h 800. The default height is 1200px."
    disp :usage -h --help
}

if [ $# -gt 0 ]; then
    cmd=$1
    shift
    case $cmd in
    clip)
        echo "Clip ..."
        eval "$(getoptions parser_definition_clip parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/clip.sh"
        fn_clip "$@"
        ;;
    retro)
        echo "Retro ..."
        eval "$(getoptions parser_definition_retro parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/retro.sh"
        fn_retro "$@"
        ;;
    split)
        echo "Split ..."
        eval "$(getoptions parser_definition_split parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/split.sh"
        fn_split "$@"
        ;;
    sticker)
        echo "Sticker ..."
        eval "$(getoptions parser_definition_sticker parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/sticker.sh"
        fn_sticker "$@"
        ;;
    3d)
        echo "3D..."
        eval "$(getoptions parser_definition_3d parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/3d.sh"
        fn_3d "$@"
        ;;
    arcade)
        echo "Arcade ..."
        eval "$(getoptions parser_definition_arcade parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/lib/arcade.sh"
        fn_arcade "$@"
        ;;
    --) ;; # no subcommand, arguments only
    esac
fi
