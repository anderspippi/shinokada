#!/usr/bin/env bash

set -eu

# shellcheck disable=SC2034
VERSION="1.1.3"
SCRIPT_NAME=$(basename "$0")
OUTPUT_DIR="$HOME/.cache/teffects"

readlinkf() {
    [ "${1:-}" ] || return 1
    max_symlinks=40
    CDPATH='' # to avoid changing to an unexpected directory

    target=$1
    [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
    [ -d "${target:-/}" ] && target="$target/"

    cd -P . 2>/dev/null || return 1
    while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
        if [ ! "$target" = "${target%/*}" ]; then
            case $target in
            /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
            *) cd -P "./${target%/*}" 2>/dev/null || break ;;
            esac
            target=${target##*/}
        fi

        if [ ! -L "$target" ]; then
            target="${PWD%/}${target:+/}${target}"
            printf '%s\n' "${target:-/}"
            return 0
        fi
        link=$(ls -dl -- "$target" 2>/dev/null) || break
        target=${link#*" $target -> "}
    done
    return 1
}

self=$(readlinkf "$0")
script_dir=${self%/*}
# script_dir="/usr/share/teffects"

# Variables for options
VAR_ALIGN="Text alignment. Default: center."
VAR_BCOLOR="Background color. Enclose with quotes."
VAR_BOPACITY="Background image opacity."
VAR_BROWSER="A browser will be open as the default. Not to open it, use +o or --no-open."
VAR_BIMG="Background image url."
VAR_CONTWIDTH="Content width."
VAR_COLOR="Font color. Enclose with quotes."
VAR_GCOLOR="Grow color. Enclose with quotes."
VAR_HEIGHT="Image height. Default: 1200px."
VAR_IMAGE="A image will be open as the default. Not to open it, use +i or --no-image."
VAR_OUTPUT_DIR="Output directory. Use an absolute path without a trailing slash. Default: ${OUTPUT_DIR} directory."
VAR_LPADDING="Letter padding. Default: 10px. e.g. 5px 10px."
VAR_PADDING="Container padding. Default: 100px. e.g. 50px 100px."
VAR_SIZE="Font-size. Use a number without a unit."
VAR_TEXT="Your text to print."
VAR_TTEXT="Title text to print."
VAR_STEXT="Sub text to print."
VAR_WIDTH="Image width. Use a number without px. Default: 1600px."

# shellcheck disable=SC1091
{
    . "${script_dir}/lib/getoptions.sh"
    . "${script_dir}/lib/main_definition.sh"
    . "${script_dir}/lib/3d_definition.sh"
    . "${script_dir}/lib/animate_definition.sh"
    . "${script_dir}/lib/arcade_definition.sh"
    . "${script_dir}/lib/blob_definition.sh"
    . "${script_dir}/lib/bubble_definition.sh"
    . "${script_dir}/lib/circulate_definition.sh"
    . "${script_dir}/lib/circulate1_definition.sh"
    . "${script_dir}/lib/clip_definition.sh"
    . "${script_dir}/lib/covfete_definition.sh"
    . "${script_dir}/lib/dashed-shadow_definition.sh"
    . "${script_dir}/lib/glow_definition.sh"
    . "${script_dir}/lib/jump_definition.sh"
    . "${script_dir}/lib/layer_definition.sh"
    . "${script_dir}/lib/neon_definition.sh"
    . "${script_dir}/lib/new-neon_definition.sh"
    . "${script_dir}/lib/pinchy_definition.sh"
    . "${script_dir}/lib/popart_definition.sh"
    . "${script_dir}/lib/retro_definition.sh"
    . "${script_dir}/lib/reveal_definition.sh"
    . "${script_dir}/lib/rotate_definition.sh"
    . "${script_dir}/lib/shade_definition.sh"
    . "${script_dir}/lib/shadow_definition.sh"
    . "${script_dir}/lib/shadow2_definition.sh"
    . "${script_dir}/lib/silentfilm_definition.sh"
    . "${script_dir}/lib/smoky_definition.sh"
    . "${script_dir}/lib/split_definition.sh"
    . "${script_dir}/lib/squiggle_definition.sh"
    . "${script_dir}/lib/sticker_definition.sh"
    . "${script_dir}/lib/stripe_definition.sh"
    . "${script_dir}/lib/strokeshadow_definition.sh"
    . "${script_dir}/lib/transmission_definition.sh"
    . "${script_dir}/lib/type_definition.sh"
}

eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"

# check os
if [[ $(uname) == "Linux" ]]; then
    FIREFOX="/usr/bin/firefox"
    # For Ubuntu close xdg-open
    # because when it is open a new image doesn't display
    # pkill -f eog | exit
elif [[ $(uname) == "Darwin" ]]; then
    FIREFOX="/Applications/Firefox.app/Contents/MacOS/firefox"
fi

# check bash version
if ((BASH_VERSINFO[0] < 5)); then
    printf '%s\n' "Error: This requires Bash v5.0 or higher. You have version $BASH_VERSION." 1>&2
    exit 2
fi

# check if Firefox is running. If it is, ask if the script can close it.
if pgrep -f firefox; then
    printf "We need to close Firefox in order to proceed. May I close Firefox? (yes/y/no/n)"
    read -r RES
    USER_ANS=$(echo "$RES" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [ "$USER_ANS" = "Y" ]; then
        pkill -f firefox | exit
    else
        echo "Exiting ..."
        exit
    fi
fi

# create OUTPUT_DIR
if [ ! -d "$OUTPUT_DIR" ]; then
    mkdir -p "$OUTPUT_DIR" || {
        echo "Not able to create a dir."
        exit 1
    }
fi

# remove files in outputs dir
if [ -n "$(ls "$OUTPUT_DIR")" ]; then
    echo "Removing files in $OUTPUT_DIR."
    rm -- "$OUTPUT_DIR/"*.*
fi

ALIGN_TYPES='left | center | right'

# clip
font_type() {
    case $OPTARG in
    500) FONT_ATT=":wght@500" ;;
    700) FONT_ATT=":wght@700" ;;
    900) FONT_ATT=":wght@900" ;;
    esac
}

FONT_ATT=''
FONT_WEIGHT='500 | 700 | 900'

anim_type() {
    # Normalization only
    case $OPTARG in
    red) OPTARG="red" ;;
    blue) OPTARG="blue" ;;
    purple) OPTARG="purple" ;;
    esac
}

number() {
    case $OPTARG in *[!0-9]*) return 1 ;; esac
}

if [ $# -gt 0 ]; then
    cmd=$1
    shift
    case $cmd in
    3d)
        eval "$(getoptions parser_definition_3d parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/3d.sh"
        fn_3d "$@"
        ;;
    animate)
        eval "$(getoptions parser_definition_animate parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/animate.sh"
        fn_animate "$@"
        ;;
    arcade)
        eval "$(getoptions parser_definition_arcade parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/arcade.sh"
        fn_arcade "$@"
        ;;
    blob)
        eval "$(getoptions parser_definition_blob parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/blob.sh"
        fn_blob "$@"
        ;;
    bubble)
        eval "$(getoptions parser_definition_bubble parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/bubble.sh"
        fn_bubble "$@"
        ;;
    circulate)
        eval "$(getoptions parser_definition_circulate parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/circulate.sh"
        fn_circulate "$@"
        ;;
    circulate1)
        eval "$(getoptions parser_definition_circulate1 parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/circulate1.sh"
        fn_circulate1 "$@"
        ;;
    clip)
        eval "$(getoptions parser_definition_clip parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/clip.sh"
        fn_clip "$@"
        ;;
    clip-animate)
        eval "$(getoptions parser_definition_clip-animate parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/clip-animate.sh"
        fn_clip-animate "$@"
        ;;
    covfete)
        eval "$(getoptions parser_definition_covfete parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/covfete.sh"
        fn_covfete "$@"
        ;;
    dashed-shadow)
        eval "$(getoptions parser_definition_dashed-shadow parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/dashed-shadow.sh"
        fn_dashed-shadow "$@"
        ;;
    glow)
        eval "$(getoptions parser_definition_glow parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/glow.sh"
        fn_glow "$@"
        ;;
    jump)
        eval "$(getoptions parser_definition_jump parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/jump.sh"
        fn_jump "$@"
        ;;
    layer)
        eval "$(getoptions parser_definition_layer parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/layer.sh"
        fn_layer "$@"
        ;;
    neon)
        eval "$(getoptions parser_definition_neon parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/neon.sh"
        fn_neon "$@"
        ;;
    new-neon)
        eval "$(getoptions parser_definition_new-neon parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/new-neon.sh"
        fn_new-neon "$@"
        ;;
    pinchy)
        eval "$(getoptions parser_definition_pinchy parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/pinchy.sh"
        fn_pinchy "$@"
        ;;
    popart)
        eval "$(getoptions parser_definition_popart parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/popart.sh"
        fn_popart "$@"
        ;;
    retro)
        eval "$(getoptions parser_definition_retro parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/retro.sh"
        fn_retro "$@"
        ;;
    rotate)
        eval "$(getoptions parser_definition_rotate parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/rotate.sh"
        fn_rotate "$@"
        ;;
    reveal)
        eval "$(getoptions parser_definition_reveal parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/reveal.sh"
        fn_reveal "$@"
        ;;
    shade)
        eval "$(getoptions parser_definition_shade parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/shade.sh"
        fn_shade "$@"
        ;;
    shadow)
        eval "$(getoptions parser_definition_shadow parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/shadow.sh"
        fn_shadow "$@"
        ;;
    shadow2)
        eval "$(getoptions parser_definition_shadow2 parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/shadow2.sh"
        fn_shadow2 "$@"
        ;;
    silentfilm)
        eval "$(getoptions parser_definition_silentfilm parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/silentfilm.sh"
        fn_silentfilm "$@"
        ;;
    smoky)
        eval "$(getoptions parser_definition_smoky parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/smoky.sh"
        fn_smoky "$@"
        ;;
    split)
        eval "$(getoptions parser_definition_split parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/split.sh"
        fn_split "$@"
        ;;
    squiggle)
        eval "$(getoptions parser_definition_squiggle parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/squiggle.sh"
        fn_squiggle "$@"
        ;;
    sticker)
        eval "$(getoptions parser_definition_sticker parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/sticker.sh"
        fn_sticker "$@"
        ;;
    stripe)
        eval "$(getoptions parser_definition_stripe parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/stripe.sh"
        fn_stripe "$@"
        ;;
    strokeshadow)
        eval "$(getoptions parser_definition_strokeshadow parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/strokeshadow.sh"
        fn_strokeshadow "$@"
        ;;
    transmission)
        eval "$(getoptions parser_definition_transmission parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/transmission.sh"
        fn_transmission "$@"
        ;;
    type)
        eval "$(getoptions parser_definition_type parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/type.sh"
        fn_type "$@"
        ;;
    --) ;; # no subcommand, arguments only
    esac
fi
